from telebot.types import Message

from config_data.config import CHANNEL_ID
from database.models import User, Server, VPNKey
from loader import bot, app_logger, scheduler
from keyboards.inline.servers import get_locations_markup, get_instruction_markup
from states.states import GetVPNKey
from utils.functions import is_subscribed
from utils.generate_vpn_keys import generate_key
from utils.tasks import cancel_key_revocation
from utils.work_vpn_keys import revoke_key


@bot.message_handler(commands=["location"])
def location_handler(message: Message):
    """ –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è """
    app_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /location")
    cur_user = User.get(User.user_id == message.from_user.id)

    if is_subscribed(CHANNEL_ID, message.from_user.id):
        cur_user.is_subscribed = True
        bot.send_message(message.chat.id, "üåç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", reply_markup=get_locations_markup())
        bot.set_state(message.chat.id, GetVPNKey.get_server)
    else:
        bot.send_message(message.chat.id, f"üö´ –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ [–Ω–∞—à –∫–∞–Ω–∞–ª](https://t.me/{CHANNEL_ID[1:]})!\n"
                                          f"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É.",
                         parse_mode="Markdown")
        cur_user.is_subscribed = False
    cur_user.save()


@bot.callback_query_handler(func=None, state=GetVPNKey.get_server)
def get_server_handler(call):
    """ –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è """
    bot.answer_callback_query(callback_query_id=call.id)

    server_id = call.data

    cur_user: User = User.get(User.user_id == call.from_user.id)
    cur_server: Server = Server.get_by_id(server_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ —Ç–µ–∫—É—â–∏–π VPN –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω.
    try:
        VPNKey.get_by_id(cur_user.vpn_key)
    except Exception:
        app_logger.warning(f"–í–Ω–∏–º–∞–Ω–∏–µ! –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {cur_user.full_name} –Ω–µ –Ω–∞—à–ª–æ—Å—å –∫–ª—é—á–∞ VPN!")
        cur_user.vpn_key = None
        cur_user.save()

    app_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {cur_user.full_name} –≤—ã–±—Ä–∞–ª —Å–µ—Ä–≤–µ—Ä {cur_server.location}")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö vpn –∫–ª—é—á–µ–π –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –≤—ã–±–æ—Ä –æ–¥–Ω–æ–≥–æ
    for vpn_key_obj in cur_server.keys:
        if vpn_key_obj.is_valid:
            if cur_user.vpn_key is not None:
                users_vpn = VPNKey.get_by_id(cur_user.vpn_key)
                users_vpn.is_valid = True
                users_vpn.save()
                app_logger.info(f"VPN –∫–ª—é—á {users_vpn.name} —Ç–µ–ø–µ—Ä—å —Å–≤–æ–±–æ–¥–µ–Ω.")
            cur_user.vpn_key = vpn_key_obj
            cur_user.save()
            vpn_key_obj.is_valid = False
            vpn_key_obj.save()
            app_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {cur_user.full_name} –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–ª –∫–ª—é—á {vpn_key_obj.name}")
            with open(vpn_key_obj.qr_code, "rb") as qr_code:
                bot.send_photo(
                    call.message.chat.id,
                    qr_code,
                    caption=(
                        "üîí –ú—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö!\n\n"
                        f"üîë –ò–º—è –∫–ª—é—á–∞: *{vpn_key_obj.name}*\n"
                        f"üåç –°–µ—Ä–≤–µ—Ä: *{cur_server.location}*\n"
                        f"üîó URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n\n`{vpn_key_obj.key}`"
                    ),
                    parse_mode="Markdown",
                    reply_markup=get_instruction_markup()
                )
            bot.set_state(call.message.chat.id, None)
            return

    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–ª—é—á–µ–π, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
    app_logger.warning(f"–í–Ω–∏–º–∞–Ω–∏–µ! –î–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {cur_server.location} –Ω–µ –Ω–∞—à–ª–æ—Å—å —Å–≤–æ–±–æ–¥–Ω—ã—Ö VPN –∫–ª—é—á–µ–π! "
                       f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–π...")
    bot.send_message(call.message.chat.id, "‚åõ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ... –ò–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ VPN –∫–ª—é—á–∞...")

    new_key: VPNKey = generate_key(cur_server)
    if new_key is None:
        app_logger.error("–í–Ω–∏–º–∞–Ω–∏–µ! –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á!")
        bot.send_message(call.message.chat.id, "‚ùå –í–µ–¥—É—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ—ç—Ç–æ–º—É "
                                               "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞ –ø–æ–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞!\n"
                                               "–ú—ã –ø—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üòä")
        bot.set_state(call.message.chat.id, None)
        return
    app_logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –∫–ª—é—á {new_key.name}!")

    if cur_user.vpn_key is not None:
        users_vpn = VPNKey.get_by_id(cur_user.vpn_key)
        revoke_key(users_vpn)

    cur_user.vpn_key = new_key
    cur_user.save()

    new_key.is_valid = False
    new_key.save()
    app_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {cur_user.full_name} –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–ª –Ω–æ–≤—ã–π –∫–ª—é—á {new_key.name}")
    with open(new_key.qr_code, "rb") as qr_code:
        bot.send_photo(
            call.message.chat.id,
            qr_code,
            caption=(
                "üîí –ú—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö!\n\n"
                f"üîë –ò–º—è –∫–ª—é—á–∞: *{new_key.name}*\n"
                f"üåç –°–µ—Ä–≤–µ—Ä: *{cur_server.location}*\n"
                f"üîó URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n\n`{new_key.key}`"
            ),
            parse_mode="Markdown",
            reply_markup=get_instruction_markup()
        )
    bot.set_state(call.message.chat.id, None)


@bot.callback_query_handler(func=lambda call: call.data.startswith("renew_"))
def renew_key_handler(call):
    bot.answer_callback_query(callback_query_id=call.id)
    try:
        vpn_key_id = int(call.data.split("_")[1])
        vpn_key = VPNKey.get_by_id(vpn_key_id)
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É –æ—Ç–∑—ã–≤–∞
        cancel_key_revocation(vpn_key, scheduler)
        bot.send_message(call.message.chat.id,
                         f"‚úÖ –í–∞—à VPN –∫–ª—é—á ¬´{vpn_key.name}¬ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª—ë–Ω!")
        app_logger.info(f"VPN –∫–ª—é—á {vpn_key.name} –ø—Ä–æ–¥–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {call.from_user.full_name}.")
    except Exception as e:
        app_logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∫–ª—é—á–∞: {e}")
        bot.send_message(call.message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞.")
