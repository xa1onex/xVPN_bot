from telebot.types import Message

from config_data.config import CHANNEL_ID
from database.models import User, Server, VPNKey, UserVPNKey
from loader import bot, app_logger, scheduler
from keyboards.inline.servers import get_locations_markup, get_instruction_markup, get_deleted_key_markup
from states.states import GetVPNKey
from utils.functions import is_subscribed
from utils.generate_vpn_keys import generate_key
from utils.tasks import cancel_key_revocation_for_user
from utils.work_vpn_keys import revoke_key
from i18n_middleware import _


@bot.message_handler(commands=["location"])
def location_handler(message: Message):
    """ –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è """
    app_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /location")
    cur_user = User.get(User.user_id == message.from_user.id)

    if is_subscribed(CHANNEL_ID, message.from_user.id):
        cur_user.is_subscribed = True
        bot.send_message(message.chat.id, _("üåç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:"),
                         reply_markup=get_locations_markup())
        bot.set_state(message.chat.id, GetVPNKey.get_server)
    else:
        bot.send_message(message.chat.id, _("üö´ –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ [–Ω–∞—à –∫–∞–Ω–∞–ª](https://t.me/{channel_id})!\n"
                                            "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É.").format(
            channel_id=CHANNEL_ID[1:]
        ),
                         parse_mode="Markdown")
        cur_user.is_subscribed = False
    cur_user.save()


@bot.callback_query_handler(func=None, state=GetVPNKey.get_server)
def get_server_handler(call):
    """ –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è """
    bot.answer_callback_query(callback_query_id=call.id)

    server_id = call.data

    cur_user: User = User.get(User.user_id == call.from_user.id)
    cur_server: Server = Server.get_by_id(server_id)

    app_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {cur_user.full_name} –≤—ã–±—Ä–∞–ª —Å–µ—Ä–≤–µ—Ä {cur_server.location}")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–µ—Ä–µ–∑ —Å–≤—è–∑—å many-to-many)
    user_keys = list(cur_user.vpn_keys)
    if len(user_keys) >= 3:
        # –õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∫–ª—é—á –¥–ª—è –∑–∞–º–µ–Ω—ã

        bot.send_message(
            call.message.chat.id,
            _("‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ 3 –∞–∫—Ç–∏–≤–Ω—ã—Ö VPN –∫–ª—é—á–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å:"),
            reply_markup=get_deleted_key_markup(user_keys)
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
        with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
            data["server_id"] = server_id
        bot.set_state(call.message.chat.id, GetVPNKey.choose_key_to_replace)
        return

    # –ï—Å–ª–∏ –ª–∏–º–∏—Ç –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç ‚Äì –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –∫–ª—é—á –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    available_key = None
    for vpn_key_obj in cur_server.keys:
        if vpn_key_obj.is_valid:
            available_key = vpn_key_obj
            break

    if available_key:
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–ª—é—á –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
        UserVPNKey.create(user=cur_user, vpn_key=available_key)
        available_key.is_valid = False
        available_key.save()
        app_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {cur_user.full_name} –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–ª –∫–ª—é—á {available_key.name}")
        with open(available_key.qr_code, "rb") as qr_code:
            caption = _(
                "üîí –ú—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö!\n\n"
                "üîë –ò–º—è –∫–ª—é—á–∞: <b>{name}</b>\n"
                "üåç –°–µ—Ä–≤–µ—Ä: <b>{location}</b>\n"
                "üîó URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n<code>{key}</code>"
            ).format(
                name=available_key.name,
                location=cur_server.location,
                key=available_key.key
            )
            bot.send_photo(
                call.message.chat.id,
                qr_code,
                caption=caption,
                parse_mode="HTML",
                reply_markup=get_instruction_markup()
            )
        bot.set_state(call.message.chat.id, None)
        return

    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–ª—é—á–µ–π, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
    app_logger.warning(f"–î–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {cur_server.location} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö VPN –∫–ª—é—á–µ–π! –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–π...")
    bot.send_message(
        call.message.chat.id,
        _("‚åõ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ... –ò–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ VPN –∫–ª—é—á–∞...")
    )

    new_key: VPNKey = generate_key(cur_server)
    if new_key is None:
        app_logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á!")
        bot.send_message(
            call.message.chat.id,
            _("‚ùå –í–µ–¥—É—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ—ç—Ç–æ–º—É –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞ –ø–æ–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞!"
            "\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üòä")
        )
        bot.set_state(call.message.chat.id, None)
        return
    app_logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –∫–ª—é—á {new_key.name}!")

    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    UserVPNKey.create(user=cur_user, vpn_key=new_key)
    new_key.is_valid = False
    new_key.save()
    app_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {cur_user.full_name} –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–ª –Ω–æ–≤—ã–π –∫–ª—é—á {new_key.name}")
    with open(new_key.qr_code, "rb") as qr_code:
        caption = _(
            "üîí –ú—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö!\n\n"
            "üîë –ò–º—è –∫–ª—é—á–∞: <b>{name}</b>\n"
            "üåç –°–µ—Ä–≤–µ—Ä: <b>{location}</b>\n"
            "üîó URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n<code>{key}</code>"
        ).format(
            name=new_key.name,
            location=cur_server.location,
            key=new_key.key
        )
        bot.send_photo(
            call.message.chat.id,
            qr_code,
            caption=caption,
            parse_mode="HTML",
            reply_markup=get_instruction_markup()
        )
    bot.set_state(call.message.chat.id, None)


@bot.callback_query_handler(func=lambda call: call.data.startswith("remove_key_"),
                            state=GetVPNKey.choose_key_to_replace)
def remove_key_handler(call):
    """ Callback —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞, –∫–∞–∫–æ–π VPN –∫–ª—é—á —É–¥–∞–ª–∏—Ç—å (–ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞) """
    bot.answer_callback_query(callback_query_id=call.id)

    vpn_key_id = call.data.split("_")[2]
    vpn_key = VPNKey.get_by_id(vpn_key_id)
    # –û—Ç–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª—é—á

    app_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.full_name} –≤—ã–±—Ä–∞–ª –∑–∞–º–µ–Ω—É –∫–ª—é—á–∞ {vpn_key.name}")

    # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ —ç—Ç–∏–º –∫–ª—é—á–æ–º
    UserVPNKey.delete().where(UserVPNKey.vpn_key == vpn_key,
                              UserVPNKey.user == User.get(User.user_id == call.from_user.id)).execute()
    if revoke_key(vpn_key):
        bot.send_message(call.message.chat.id, _("‚úÖ VPN –∫–ª—é—á ¬´{name}¬ª —É–¥–∞–ª–µ–Ω").format(
            name=vpn_key.name
        ))
        app_logger.info(f"–ö–ª—é—á {vpn_key.name} –æ—Ç–æ–∑–≤–∞–Ω –ø–æ –≤—ã–±–æ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.full_name}")
    else:
        bot.send_message(call.message.chat.id, _("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∑—ã–≤–µ –∫–ª—é—á–∞!"))
        app_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∑—ã–≤–µ –∫–ª—é—á–∞ {vpn_key.name}!")
        bot.set_state(call.message.chat.id, None)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ server_id
    with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
        server_id = data.get("server_id")
    if not server_id:
        bot.send_message(call.message.chat.id, _("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞."))
        bot.set_state(call.message.chat.id, None)
        return

    cur_server: Server = Server.get_by_id(server_id)
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    bot.send_message(
        call.message.chat.id,
        _("‚åõ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ... –ò–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ VPN –∫–ª—é—á–∞...")
    )
    new_key: VPNKey = generate_key(cur_server)
    if new_key is None:
        app_logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á!")
        bot.send_message(call.message.chat.id,
                         _("‚ùå –í–µ–¥—É—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ—ç—Ç–æ–º—É –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞ –ø–æ–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞!"
                           "\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üòä"))
        bot.set_state(call.message.chat.id, None)
        return

    cur_user: User = User.get(User.user_id == call.from_user.id)

    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    UserVPNKey.create(user=cur_user, vpn_key=new_key)
    new_key.is_valid = False
    new_key.save()
    app_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {cur_user.full_name} –∑–∞–º–µ–Ω–∏–ª –∫–ª—é—á {vpn_key.name} –Ω–∞ –Ω–æ–≤—ã–π –∫–ª—é—á {new_key.name}")
    with open(new_key.qr_code, "rb") as qr_code:
        caption = _(
            "üîí –ú—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö!\n\n"
            "üîë –ò–º—è –∫–ª—é—á–∞: <b>{name}</b>\n"
            "üåç –°–µ—Ä–≤–µ—Ä: <b>{location}</b>\n"
            "üîó URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n<code>{key}</code>"
        ).format(
            name=new_key.name,
            location=cur_server.location,
            key=new_key.key
        )
        bot.send_photo(
            call.message.chat.id,
            qr_code,
            caption=caption,
            parse_mode="HTML",
            reply_markup=get_instruction_markup()
        )
    bot.set_state(call.message.chat.id, None)


@bot.callback_query_handler(func=lambda call: call.data.startswith("renew_user_"))
def renew_keys_handler(call):
    bot.answer_callback_query(callback_query_id=call.id)
    try:
        user_id = call.data.split("_")[2]
        user_obj = User.get(User.user_id == user_id)
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É –æ—Ç–∑—ã–≤–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cancel_key_revocation_for_user(user_obj, scheduler)
        bot.send_message(call.message.chat.id,
                         _("‚úÖ –í–∞—à–∏ VPN –∫–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω—ã!"))
        app_logger.info(f"VPN –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_obj.full_name} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω—ã.")
    except Exception as e:
        app_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –∫–ª—é—á–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.full_name}: {e}")
        bot.send_message(call.message.chat.id, _("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –∫–ª—é—á–µ–π."))
