from telebot.types import Message
from loader import bot, app_logger
from config_data.config import DEFAULT_COMMANDS, ADMIN_COMMANDS, ALLOWED_USERS, CHANNEL_ID
from database.models import User, Group
from utils.functions import is_subscribed
from keyboards.inline.subscribed import is_subscribed_markup
from keyboards.reply.handlers_reply import handlers_reply
from states.states import SubscribedState


start_text = """*–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!*
                
‚ò∫Ô∏è –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª [Guard Tunnel VPN](https://t.me/{channel_id})
                
üéÅ –í –ø–æ–¥–∞—Ä–æ–∫ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ *–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø* –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
                
*–° –£–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ Guard Tunnel VPN*
                
_–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –Ω–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ –Ω–∞ –∫–Ω–æ–ø–∫—É: ‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è_"""


@bot.message_handler(commands=['start'])
def bot_start(message: Message):
    if message.chat.type == "private":
        is_sub = True if message.from_user.id in ALLOWED_USERS else False
        if User.get_or_none(user_id=message.from_user.id) is None:
            app_logger.info(f"–í–Ω–∏–º–∞–Ω–∏–µ! –ù–æ–≤—ã–π —é–∑–µ—Ä: {message.from_user.full_name} - {message.from_user.username}")
            User.create(user_id=message.from_user.id,
                        full_name=message.from_user.full_name,
                        username=message.from_user.username if message.from_user.username is not None else "None",
                        is_premium=message.from_user.is_premium,
                        is_subscribed=is_sub)
        commands = [f"/{command} - {description}" for command, description in DEFAULT_COMMANDS]
        if message.from_user.id in ALLOWED_USERS:
            commands.extend([f"/{command} - {description}" for command, description in ADMIN_COMMANDS])
            bot.send_message(
                message.from_user.id,
                f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}! üëã\n"
                f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –î–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n{'\n'.join(commands)}",
                reply_markup=handlers_reply()
            )
        else:
            if is_subscribed(CHANNEL_ID, message.from_user.id):
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª, —Ç–æ–≥–¥–∞ –µ–º—É –º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.
                bot.send_message(message.from_user.id, f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, {message.from_user.full_name}.\n"
                                                       f"–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –Ω–∞ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ!\n"
                                                       f"–ß—Ç–æ –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à VPN —Å–µ—Ä–≤–∏—Å, "
                                                       f"—Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∏–∂–µ üëá\n"
                                                       f"{'\n'.join(commands)}",
                                 reply_markup=handlers_reply())
                cur_user = User.get(User.user_id == message.from_user.id)
                cur_user.is_subscribed = True
                cur_user.save()
            else:
                bot.send_message(message.from_user.id, start_text.format(channel_id=CHANNEL_ID[1:]),
                                 reply_markup=is_subscribed_markup(), parse_mode='Markdown',
                                 disable_web_page_preview=True)
                bot.set_state(message.from_user.id, SubscribedState.subscribe)

    else:
        bot.send_message(message.chat.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø - —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø. "
                                          "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, "
                                          "–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–∫—É)")
        if Group.get_or_none(group_id=message.chat.id) is None:
            Group.create(group_id=message.chat.id,
                         title=message.chat.title,
                         description=message.chat.description,
                         bio=message.chat.bio,
                         invite_link=message.chat.invite_link,
                         location=message.chat.location,
                         username=message.chat.username)
            app_logger.info(f"–í–Ω–∏–º–∞–Ω–∏–µ! –ù–æ–≤–∞—è –≥—Ä—É–ø–ø–∞: {message.chat.title} - {message.chat.invite_link}")
        if User.get_or_none(user_id=message.from_user.id) is None:
            User.create(user_id=message.from_user.id,
                        full_name=message.from_user.full_name,
                        username=message.from_user.username,
                        is_premium=message.from_user.is_premium)
            app_logger.info(f"–í–Ω–∏–º–∞–Ω–∏–µ! –ù–æ–≤—ã–π —é–∑–µ—Ä: {message.from_user.full_name} - {message.from_user.username}")

@bot.callback_query_handler(func=None, state=SubscribedState.subscribe)
def is_subscribed_handler(call):
    if is_subscribed(CHANNEL_ID, call.from_user.id):
        commands = [f"/{command} - {description}" for command, description in DEFAULT_COMMANDS]
        app_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.full_name} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!")

        cur_user = User.get(User.user_id == call.from_user.id)
        cur_user.is_subscribed = True
        cur_user.save()

        bot.answer_callback_query(callback_query_id=call.id)
        bot.send_message(call.message.chat.id, "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à —Å–µ—Ä–≤–∏—Å, –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!\n"
                                               f"–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                                               f"{'\n'.join(commands)}")
        bot.set_state(call.message.chat.id, None)
    else:
        bot.answer_callback_query(callback_query_id=call.id)
        bot.send_message(call.message.chat.id, start_text.format(channel_id=CHANNEL_ID[1:]),
                         reply_markup=is_subscribed_markup(), parse_mode='Markdown',
                         disable_web_page_preview=True)
