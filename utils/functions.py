from config_data.config import DEFAULT_COMMANDS, ADMIN_COMMANDS
from loader import bot, app_logger
import json
import os
import importlib.util
from database.models import Migration
from config_data.config import BASE_DIR


def is_subscribed(chat_id, user_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –≤—Ö–æ–¥–∏—Ç –≤ ("creator", "administrator", "member", "restricted").
    –ï—Å–ª–∏ user_id –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False.
    """
    try:
        # –ü—Ä–∏–≤–æ–¥–∏–º user_id –∫ —Ü–µ–ª–æ–º—É —á–∏—Å–ª—É, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
        user_id = int(user_id)
    except (ValueError, TypeError):
        app_logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id: {user_id}")
        return False

    try:
        result = bot.get_chat_member(chat_id, user_id)
        if result.status in ("creator", "administrator", "member", "restricted"):
            return True
    except Exception as e:
        app_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {e}")
    return False



def valid_ip(address):
    try:
        host_bytes = address.split('.')
        valid = [int(b) for b in host_bytes]
        valid = [b for b in valid if 0 <= b <= 255]
        return len(host_bytes) == 4 and len(valid) == 4
    except (TypeError, ValueError, IndexError):
        return False

def convert_amnezia_xray_json_to_vless_str(amnezia_str: str) -> str | None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ AMnezia Xray JSON –≤ VLESS —Å—Ç—Ä–æ—á–∫—É
    :param amnezia_str: JSON-—Å—Ç—Ä–æ–∫–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Amnezia Xray
    :return: VLESS-—Å—Ç—Ä–æ–∫–∞ –ª–∏–±–æ None –æ–±—ä–µ–∫—Ç
    """
    try:
        json_object = json.loads(amnezia_str)
    except Exception:
        app_logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å JSON –≤ –æ–±—ä–µ–∫—Ç!")
        return None
    try:
        outbounds = json_object["outbounds"][0]["settings"]["vnext"][0]
        stream_settings = json_object["outbounds"][0]["streamSettings"]

        address_and_port = f"{outbounds['address']}:{outbounds['port']}"
        flow = outbounds["users"][0]["flow"]
        user_id = outbounds["users"][0]["id"]
        type_of_net = stream_settings["network"]
        security = stream_settings["security"]
        fp = stream_settings["realitySettings"]["fingerprint"]
        pbk = stream_settings["realitySettings"]["publicKey"]
        sni = stream_settings["realitySettings"]["serverName"]
        sid = stream_settings["realitySettings"]["shortId"]

        url = (f"vless://{user_id}@{address_and_port}?flow={flow}&type={type_of_net}&"
               f"security={security}&fp={fp}&sni={sni}&pbk={pbk}&sid={sid}")
    except Exception as ex:
        app_logger.error(f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥ Amnezia!\n{ex}")
        return None
    return url

def get_all_commands_bot():
    total_commands = [f"/{elem[0]}" for elem in DEFAULT_COMMANDS]
    total_commands.extend([f"/{elem[0]}" for elem in ADMIN_COMMANDS])
    total_commands.extend(["üåç –°–µ—Ä–≤–µ—Ä—ã", "‚ùì –°–ø—Ä–∞–≤–∫–∞", "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "üîß –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                           "üåç Servers", "‚ùì Help", "üìñ Instruction", "üîß Control panel"])
    return total_commands


def run_migrations():
    migrations_dir = os.path.join(BASE_DIR, "migrations")
    if not os.path.exists(migrations_dir):
        app_logger.info("–ü–∞–ø–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏.")
        return
    migration_files = sorted([f for f in os.listdir(migrations_dir) if f.endswith(".py")])
    for filename in migration_files:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è
            Migration.get(Migration.name == filename)
            app_logger.info(f"–ú–∏–≥—Ä–∞—Ü–∏—è {filename} —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞.")
        except Migration.DoesNotExist:
            filepath = os.path.join(migrations_dir, filename)
            spec = importlib.util.spec_from_file_location("migration_module", filepath)
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)
            if hasattr(module, "run_migration"):
                module.run_migration()
                Migration.create(name=filename)
                app_logger.info(f"–ú–∏–≥—Ä–∞—Ü–∏—è {filename} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞.")
            else:
                app_logger.error(f"–í —Ñ–∞–π–ª–µ {filename} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è run_migration().")
