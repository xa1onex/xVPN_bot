import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import filters
from aiogram.utils import executor
from dotenv import load_dotenv
import qrcode
import io
import requests
from datetime import datetime, timedelta
import uuid
from database import Database

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=os.getenv('BOT_TOKEN'))
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
db = Database()


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è
def get_env_int(name, default):
    value = os.getenv(name)
    return int(value) if value and value.isdigit() else default


class XUI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å 3XUI API"""

    def __init__(self):
        self.base_url = os.getenv('XUI_PANEL_URL')
        if not self.base_url:
            raise ValueError("XUI_PANEL_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")

        self.session = requests.Session()
        self.session.verify = os.getenv('XUI_SSL_VERIFY') == 'True'
        self._login()

    def _login(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –ø–∞–Ω–µ–ª–∏"""
        login_url = f"{self.base_url}/login"
        data = {
            "username": os.getenv('XUI_USERNAME') or 'admin',
            "password": os.getenv('XUI_PASSWORD') or 'admin'
        }
        try:
            response = self.session.post(login_url, data=data)
            response.raise_for_status()
            logging.info("–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ 3XUI")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ 3XUI: {e}")
            raise

    def create_client(self, days: int = 30, limit: int = 2) -> dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        client_url = f"{self.base_url}/api/inbounds/addClient"
        expiry_date = (datetime.now() + timedelta(days=days)).strftime('%Y-%m-%d')

        data = {
            "inboundId": 1,  # ID –≤–∞—à–µ–≥–æ –∏–Ω–±–∞—É–Ω–¥–∞
            "enable": True,
            "email": f"{uuid.uuid4()}@vpn.bot",
            "expiryTime": expiry_date,
            "limitIp": limit,
            "totalGB": 0,  # 0 = –±–µ–∑–ª–∏–º–∏—Ç
            "enable": True
        }

        try:
            response = self.session.post(client_url, json=data)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            logging.error(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text if 'response' in locals() else ''}")
            raise

    def get_client_config(self, client_id: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
        config_url = f"{self.base_url}/api/inbounds/getClientTraffics/{client_id}"
        try:
            response = self.session.get(config_url)
            response.raise_for_status()
            data = response.json()
            return data.get('obj', data).get('config', '')
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            raise


try:
    xui = XUI()
except Exception as e:
    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å XUI: {e}")
    xui = None


def generate_qr(config: str) -> bytes:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞"""
    img = qrcode.make(config)
    byte_arr = io.BytesIO()
    img.save(byte_arr, format='PNG')
    return byte_arr.getvalue()


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    db.add_user(user.id, user.username, user.full_name)

    await message.answer(
        "üîê <b>VPN Bot</b>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/get_vpn - –ü–æ–ª—É—á–∏—Ç—å VPN –∫–æ–Ω—Ñ–∏–≥\n"
        "/my_vpns - –ú–æ–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
        "/help - –ü–æ–º–æ—â—å",
        parse_mode="HTML"
    )


@dp.message_handler(commands=['get_vpn'])
async def get_vpn(message: types.Message):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    if not xui:
        await message.answer("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        days = get_env_int('DEFAULT_DAYS', 30)
        limit = get_env_int('DEFAULT_DEVICE_LIMIT', 2)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ 3XUI
        client = xui.create_client(days=days, limit=limit)

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        client_id = client.get('id') or client.get('obj', {}).get('id')
        if not client_id:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∫–ª–∏–µ–Ω—Ç–∞: {client}")
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç 3XUI API")

        config = xui.get_client_config(client_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        vpn_id = db.create_vpn_account(message.from_user.id, config, days)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
        qr_code = generate_qr(config)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer_photo(
            photo=qr_code,
            caption=f"<b>‚úÖ –í–∞—à VPN –∞–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                    f"ID: <code>{vpn_id}</code>\n"
                    f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {days} –¥–Ω–µ–π\n"
                    f"–õ–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {limit}\n\n"
                    f"<b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b>\n<code>{config}</code>",
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"Error creating VPN: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VPN. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message_handler(commands=['my_vpns'])
async def list_vpns(message: types.Message):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    accounts = db.get_user_accounts(message.from_user.id)

    if not accounts:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π.")
        return

    text = ["<b>–í–∞—à–∏ VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n"]
    for acc in accounts:
        status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if acc[3] else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        text.append(
            f"\nID: <code>{acc[0]}</code>\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–ò—Å—Ç–µ–∫–∞–µ—Ç: {acc[2]}\n"
            f"/revoke_{acc[0]} - –û—Ç–æ–∑–≤–∞—Ç—å"
        )

    await message.answer("\n".join(text), parse_mode="HTML")


@dp.message_handler(filters.RegexpCommandsFilter(regexp_commands=['/revoke_(.*)']))
async def revoke_vpn(message: types.Message, regexp_command):
    """–û—Ç–∑—ã–≤ VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    vpn_id = regexp_command.group(1)
    db.revoke_vpn_account(vpn_id)
    await message.answer(f"VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ <code>{vpn_id}</code> –æ—Ç–æ–∑–≤–∞–Ω–æ.", parse_mode="HTML")


@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    """–ü–æ–º–æ—â—å"""
    await message.answer(
        "<b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:</b>\n\n"
        "1. <b>/get_vpn</b> - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ\n"
        "2. <b>/my_vpns</b> - —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π\n"
        "3. <b>/revoke_ID</b> - –æ—Ç–æ–∑–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ\n\n"
        "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ @–≤–∞—à_–∞–∫–∫–∞—É–Ω—Ç",
        parse_mode="HTML"
    )


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    try:
        executor.start_polling(dp, skip_updates=True)
    finally:
        db.close()